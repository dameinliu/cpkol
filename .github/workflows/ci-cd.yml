name: 🚀 CI/CD Pipeline - Full Stack App

on:
  push:
    branches: [main, production, develop]
  pull_request:
    branches: [main, production, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ${{ secrets.AWS_REGION }}.amazonaws.com
  BACKEND_IMAGE_NAME: cp-backend
  FRONTEND_IMAGE_NAME: cp-frontend

jobs:
  # ======================================
  # 代码质量检查与安全扫描
  # ======================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Python security tools
        run: |
          pip install bandit safety flake8
          
      - name: 🔒 Python security scan with bandit
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || echo "Security issues found"
          
      - name: 🛡️ Check Python dependencies for vulnerabilities
        run: |
          cd backend
          safety check -r requirements.txt || echo "Vulnerability check completed"

      - name: 📝 Python linting
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # ======================================
  # 后端构建与测试
  # ======================================
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: 📦 Install backend dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗃️ Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          cd backend
          flask db upgrade || echo "No migrations to run"

      - name: 🧪 Run backend tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          TIKAPI_API_KEY: ${{ secrets.TIKAPI_API_KEY }}
          FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
          FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
          FEISHU_REDIRECT_URI: ${{ secrets.FEISHU_REDIRECT_URI }}
        run: |
          cd backend
          pip install pytest-cov
          pytest --cov=app --cov-report=xml --cov-report=html -v

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ======================================
  # 前端构建与测试
  # ======================================
  frontend-test:
    name: 🎨 Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: 🏗️ Install pnpm
        run: npm install -g pnpm

      - name: 📥 Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: 🔍 Frontend linting
        run: |
          cd frontend
          pnpm run lint || echo "Linting completed"

      - name: 🏗️ Build frontend
        run: |
          cd frontend
          pnpm run build

      - name: 📤 Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # ======================================
  # Docker 镜像构建与推送
  # ======================================
  docker-build:
    name: 🐳 Docker Build & Push
    needs: [code-quality, backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production' || github.event_name == 'workflow_dispatch'
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏷️ Generate backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏷️ Generate frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🎨 Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ======================================
  # 部署到EC2
  # ======================================
  deploy:
    name: 🚀 Deploy to ${{ github.ref == 'refs/heads/production' && 'Production' || 'Staging' }}
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production' || github.event_name == 'workflow_dispatch'
    
    environment: 
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}

    steps:
      - name: 🔑 Install SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: 📡 Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🏗️ Setup deployment directory
        run: |
          ssh -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            mkdir -p ~/cp-app/{logs,backups,data}
            cd ~/cp-app
          "

      - name: ⚙️ Install system dependencies
        run: |
          ssh -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker \$USER
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            if ! command -v aws &> /dev/null; then
              curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
              unzip -q awscliv2.zip
              sudo ./aws/install --update
              rm -rf aws awscliv2.zip
            fi
          "

      - name: 📝 Create configuration files
        run: |
          # 创建所有配置文件
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            backend:
              image: ${BACKEND_IMAGE}
              container_name: cp-backend
              env_file:
                - .env
              ports:
                - "5000:5000"
              restart: unless-stopped
              networks:
                - cp-network
              volumes:
                - ./logs:/app/logs
                - ./data:/app/data
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
          
            frontend:
              image: ${FRONTEND_IMAGE}
              container_name: cp-frontend
              env_file:
                - .env
              ports:
                - "80:80"
                - "443:443"
              restart: unless-stopped
              networks:
                - cp-network
              depends_on:
                backend:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost/health"]
                interval: 30s
                timeout: 10s
                retries: 3
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
          
          networks:
            cp-network:
              driver: bridge
              name: cp-network
          
          volumes:
            cp-logs:
              driver: local
            cp-data:
              driver: local
          EOF
          
          # 创建环境文件
          cat > .env << 'EOF'
          # 数据库配置
          RDS_HOST=${{ secrets.RDS_HOST }}
          RDS_PORT=${{ secrets.RDS_PORT }}
          RDS_DATABASE=${{ secrets.RDS_DATABASE }}
          RDS_USERNAME=iam_user
          USE_IAM_AUTH=true
          
          # AWS配置
          AWS_REGION=${{ secrets.AWS_REGION }}
          
          # Flask配置
          FLASK_ENV=${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          
          # 第三方API配置
          TIKAPI_API_KEY=${{ secrets.TIKAPI_API_KEY }}
          FEISHU_APP_ID=${{ secrets.FEISHU_APP_ID }}
          FEISHU_APP_SECRET=${{ secrets.FEISHU_APP_SECRET }}
          FEISHU_REDIRECT_URI=${{ secrets.FEISHU_REDIRECT_URI }}
          
          # 前端配置
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_APP_TITLE=CP KOL Platform
          VITE_APP_VERSION=${{ github.sha }}
          VITE_ENVIRONMENT=${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
          
          # 镜像配置
          BACKEND_IMAGE=${{ needs.docker-build.outputs.backend-image }}
          FRONTEND_IMAGE=${{ needs.docker-build.outputs.frontend-image }}
          COMPOSE_PROJECT_NAME=cp-app
          EOF
          
          # 上传配置文件到服务器
          scp -i ec2_key.pem docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/cp-app/
          scp -i ec2_key.pem .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/cp-app/

      - name: 🔐 Deploy application
        run: |
          ssh -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            cd ~/cp-app
            
            # 设置AWS凭证
            export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
            export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            export AWS_DEFAULT_REGION='${{ secrets.AWS_REGION }}'
            
            # 备份当前部署
            if [ -f docker-compose.yml.current ]; then
              cp docker-compose.yml.current docker-compose.yml.backup-\$(date +%Y%m%d-%H%M%S)
            fi
            cp docker-compose.yml docker-compose.yml.current
            
            # 登录ECR
            aws ecr get-login-password --region '${{ secrets.AWS_REGION }}' | docker login --username AWS --password-stdin \$(echo '${{ needs.docker-build.outputs.backend-image }}' | cut -d'/' -f1)
            
            # 拉取新镜像
            docker-compose pull
            
            # 优雅停止旧容器
            docker-compose down --timeout 30
            
            # 启动新容器
            docker-compose up -d --remove-orphans
            
            # 等待服务启动
            echo 'Waiting for services to be healthy...'
            for i in {1..30}; do
              if docker-compose ps | grep -q 'healthy'; then
                echo 'Services are healthy!'
                break
              fi
              sleep 10
            done
            
            # 显示部署状态
            docker-compose ps
          "

      - name: 🧹 Cleanup
        run: |
          ssh -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            docker image prune -a -f --filter 'until=24h'
            docker volume prune -f
            docker network prune -f
          "

      - name: ✅ Deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Environment: ${{ github.ref == 'refs/heads/production' && 'Production' || 'Staging' }}"
          echo "Backend: ${{ needs.docker-build.outputs.backend-image }}"
          echo "Frontend: ${{ needs.docker-build.outputs.frontend-image }}"
          echo "SHA: ${{ github.sha }}"

  # ======================================
  # 部署后验证
  # ======================================
  post-deploy-tests:
    name: 🔍 Post-Deployment Tests
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: 🏥 Health checks
        run: |
          sleep 30
          curl -f ${{ secrets.VITE_API_URL }}/health || echo "API health check failed"
          curl -f ${{ secrets.DEPLOYMENT_URL }} || echo "Frontend health check failed"

      - name: 📝 Record deployment
        run: |
          echo "Deployment completed at $(date)"
          echo "Environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}"
          