name: CI/CD Pipeline

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          TIKAPI_API_KEY: ${{ secrets.TIKAPI_API_KEY }}
          FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
          FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
          FEISHU_REDIRECT_URI: ${{ secrets.FEISHU_REDIRECT_URI }}
        run: |
          cd backend
          pytest

      - name: Install pnpm and frontend dependencies
        run: |
          npm install -g pnpm
          cd frontend
          pnpm install --frozen-lockfile

      - name: Build frontend
        run: |
          cd frontend
          pnpm build

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    outputs:
      backend-image: ${{ steps.build-and-push-backend.outputs.image }}
      frontend-image: ${{ steps.build-and-push-frontend.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image (backend)
        id: build-and-push-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cp-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile ./backend --no-cache
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (frontend)
        id: build-and-push-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cp-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Install SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deploy script and env to EC2
        run: |
          cat > deploy.sh <<'EOF'
          #!/bin/bash
          set -e
          
          mkdir -p ~/cp-main && cd ~/cp-main

          # 配置 AWS 凭证（如果还没配置的话）
          if [ ! -f ~/.aws/credentials ]; then
            mkdir -p ~/.aws
            cat > ~/.aws/credentials << EOL
[default]
aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
EOL
            cat > ~/.aws/config << EOL
[default]
region = ${{ secrets.AWS_REGION }}
output = json
EOL
          fi

          # 安装 jq 如果不存在
          if ! command -v jq &> /dev/null; then
              sudo yum install -y jq || sudo apt-get install -y jq
          fi

          # 使用 IAM 数据库认证
          export DB_HOST=${{ secrets.RDS_HOST }}
          export DB_PORT=${{ secrets.RDS_PORT }}
          export DB_NAME=${{ secrets.RDS_DATABASE }}
          export DB_USER=iam_user
          
          # 生成 IAM 认证令牌
          export DB_TOKEN=$(aws rds generate-db-auth-token \
            --hostname $DB_HOST \
            --port $DB_PORT \
            --username $DB_USER \
            --region ${{ secrets.AWS_REGION }})

          cat > .env <<EOL
# IAM 数据库认证配置
RDS_HOST=$DB_HOST
RDS_PORT=$DB_PORT
RDS_DATABASE=$DB_NAME
RDS_USERNAME=$DB_USER
USE_IAM_AUTH=true
AWS_REGION=${{ secrets.AWS_REGION }}
TIKAPI_API_KEY=${{ secrets.TIKAPI_API_KEY }}
FEISHU_APP_ID=${{ secrets.FEISHU_APP_ID }}
FEISHU_APP_SECRET=${{ secrets.FEISHU_APP_SECRET }}
FEISHU_REDIRECT_URI=${{ secrets.FEISHU_REDIRECT_URI }}
VITE_API_URL=${{ secrets.VITE_API_URL }}
BACKEND_IMAGE=${{ needs.docker-build-and-push.outputs.backend-image }}
FRONTEND_IMAGE=${{ needs.docker-build-and-push.outputs.frontend-image }}
EOL

          cat > docker-compose.yml <<EOL
services:
  backend:
    image: \${BACKEND_IMAGE}
    env_file:
      - .env
    ports:
      - "5000:5000"
    restart: always

  frontend:
    image: \${FRONTEND_IMAGE}
    ports:
      - "80:80"
    env_file:
      - .env
    restart: always
EOL

          # 测试数据库连接
          echo "Testing database connection..."
          if command -v psql &> /dev/null; then
            DB_TOKEN_TEST=$(aws rds generate-db-auth-token \
              --hostname $DB_HOST \
              --port $DB_PORT \
              --username $DB_USER \
              --region ${{ secrets.AWS_REGION }})
            PGPASSWORD="$DB_TOKEN_TEST" psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 1;" || echo "Database connection test failed"
          fi

          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $(echo $BACKEND_IMAGE | cut -d'/' -f1)
          docker-compose pull
          docker-compose up -d --remove-orphans
          EOF

          ssh -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash -s' < deploy.sh
          