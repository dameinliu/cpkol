name: 🚀 CI/CD Pipeline - Full Stack App

on:
  push:
    branches: [main, production, develop]
  pull_request:
    branches: [main, production, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ${{ secrets.AWS_REGION }}.amazonaws.com
  BACKEND_IMAGE_NAME: cp-backend
  FRONTEND_IMAGE_NAME: cp-frontend

jobs:
  # ======================================
  # 代码质量检查与安全扫描
  # ======================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Python security tools
        run: |
          pip install bandit safety flake8
          
      - name: 🔒 Python security scan with bandit
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || echo "Security issues found"
          
      - name: 🛡️ Check Python dependencies for vulnerabilities
        run: |
          cd backend
          safety check -r requirements.txt || echo "Vulnerability check completed"

      - name: 📝 Python linting
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # ======================================
  # 后端构建与测试
  # ======================================
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: 📦 Install backend dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗃️ Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          cd backend
          flask db upgrade || echo "No migrations to run"

      - name: 🧪 Run backend tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          TIKAPI_API_KEY: ${{ secrets.TIKAPI_API_KEY }}
          FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
          FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
          FEISHU_REDIRECT_URI: ${{ secrets.FEISHU_REDIRECT_URI }}
        run: |
          cd backend
          pip install pytest-cov
          pytest --cov=app --cov-report=xml --cov-report=html -v

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ======================================
  # 前端构建与测试
  # ======================================
  frontend-test:
    name: 🎨 Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🏗️ Install pnpm
        run: npm install -g pnpm

      - name: 📦 Setup pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: 📥 Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: 🔍 Frontend linting
        run: |
          cd frontend
          pnpm run lint || echo "Linting completed"

      - name: 🏗️ Build frontend
        run: |
          cd frontend
          pnpm run build

      - name: 📤 Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # ======================================
  # Docker 镜像构建与推送
  # ======================================
  docker-build:
    name: 🐳 Docker Build & Push
    needs: [code-quality, backend-test, frontend-test]
    # 只有在特定分支上才运行
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}
      # 我们需要一个统一的、在后续步骤中易于使用的标签
      image_tag: ${{ steps.backend-meta.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏷️ Generate backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏷️ Generate frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🎨 Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ======================================
  # 部署到EC2
  # ======================================
  deploy:
    name: 🚀 Deploy to ${{ github.ref == 'refs/heads/production' && 'Production' || 'Staging' }}
    needs: docker-build
    # 无需重复检查分支，因为 'needs: docker-build' 会自动处理跳过逻辑
    runs-on: ubuntu-latest
    
    environment: 
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Generate .env file for deployment
        run: |
          echo "IMAGE_TAG=${{ needs.docker-build.outputs.image_tag }}" > .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "TIKAPI_API_KEY=${{ secrets.TIKAPI_API_KEY }}" >> .env
          echo "FEISHU_APP_ID=${{ secrets.FEISHU_APP_ID }}" >> .env
          echo "FEISHU_APP_SECRET=${{ secrets.FEISHU_APP_SECRET }}" >> .env
          echo "FEISHU_REDIRECT_URI=${{ secrets.FEISHU_REDIRECT_URI }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          
          echo "--- Generated .env file ---"
          cat .env
          echo "---------------------------"

      - name: 📤 Upload configurations to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env,docker-compose.yml,docker-compose.prod.yml"
          target: "~/cp-app"
          strip_components: 0

      - name: 🚀 Deploy application on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/cp-app
            
            echo "Pulling latest images..."
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
            
            echo "Starting new containers..."
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
            
            echo "🚀 Deployment script finished."
            sleep 15
            docker-compose ps

      - name: 🧹 Cleanup on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 清理未被使用的旧镜像和悬空卷
            docker image prune -a -f --filter 'until=24h'
            docker volume prune -f

      - name: ✅ Deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Environment: ${{ github.ref == 'refs/heads/production' && 'Production' || 'Staging' }}"
          echo "Backend: ${{ needs.docker-build.outputs.backend-image }}"
          echo "Frontend: ${{ needs.docker-build.outputs.frontend-image }}"
          echo "SHA: ${{ github.sha }}"

  # ======================================
  # 部署后验证
  # ======================================
  post-deploy-tests:
    name: 🔍 Post-Deployment Tests
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: 🏥 Health checks
        run: |
          sleep 30
          # 注意：这里我们检查的是公共 URL，而不是 localhost
          curl --fail --show-error --silent ${{ secrets.VITE_API_URL }}/health || (echo "API health check failed!" && exit 1)
          curl --fail --show-error --silent ${{ secrets.DEPLOYMENT_URL }} || (echo "Frontend health check failed!" && exit 1)

      - name: 📝 Record deployment
        run: |
          echo "Deployment completed at $(date)"
          echo "Environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}"
          
